#returns the maximum value in a numeric vector
if(na.rm == TRUE) {a <- remove_missing(a)}
{sort(remove_missing(a),decreasing = TRUE)[1])}
}
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
if(na.rm == TRUE) {a <- remove_missing(a)}
{sort(remove_missing(a),decreasing = TRUE)[1]}
}
get_maximum(b)
get_maximum(a,na.rm = TRUE)
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
sort(remove_missing(a))[1]
}
a <- c(1,4,7,NA,10)
b <- c(6,3,2,"a")
get_minimum(a,na.rm = TRUE)
get_minimum(b)
get_minimum(c(4,5,8,2))
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
{sort(remove_missing(a),decreasing = TRUE)[1]}
}
c <- c(7,4,5,12)
c <- c(7,4,5,12,NA)
get_maximum(c)
get_range <- function(a, na.rm = FALSE) {
#returns the range of a numeric vector
get_maximum(remove_missing(a)) - get_minimum(remove_missing(a))
}
get_range(a,na.rm = TRUE)
get_range(b)
get_range <- function(a, na.rm = FALSE) {
#returns the range of a numeric vector
remove_missing(a)
get_maximum(remove_missing(a)) - get_minimum(remove_missing(a))
}
get_range(b)
get_range <- function(a, na.rm = FALSE) {
#returns the range of a numeric vector
if(class(a) == 'numeric') {return ('non-numeric argument')}
{get_maximum(remove_missing(a)) - get_minimum(remove_missing(a))}
}
get_range(a,na.rm = TRUE)
get_range <- function(a, na.rm = FALSE) {
#returns the range of a numeric vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{get_maximum(remove_missing(a)) - get_minimum(remove_missing(a))}
}
get_range(a,na.rm = TRUE)
get_range(b)
get_range(c)
get_percentile10 <- function(a,na.rm = FALSE){
#returns the 10th percentile of the input vector
return (quantile(remove_missing(a),0.1)[[1]])
}
get_percentile10(a,na.rm = TRUE)
get_percentile10(b)
get_percentile10 <- function(a,na.rm = FALSE){
#returns the 10th percentile of the input vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{return (quantile(remove_missing(a),0.1)[[1]])}
}
get_percentile10(b)
get_percentile10(c)
get_percentile90 <- function(a,na.rm = FALSE){
#returns the 90th percentile of the input vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
return (quantile(remove_missing(a),0.9)[[1]])
}
get_percentile90(a,na.rm = TRUE)
get_percentile90(b)
get_percentile90(c)
get_median <- function(a, na.rm = FALSE){
#returns the median of a numeric vector
a <- remove_missing(a)
if(length((a)) %% 2 != 0) {
return (a[(length(a)+1)/2])
} else{
return ((a[length(a)/2] + a[(length(a)/2+1)])/2)
}
}
get_median(a,na.rm = TRUE)
get_median(b)
get_percentile90 <- function(a,na.rm = FALSE){
#returns the 90th percentile of the input vector
a <- remove_missing(a)
return (quantile(remove_missing(a),0.9)[[1]])
}
get_percentile90(a,na.rm = TRUE)
get_percentile90(b)
get_percentile90 <- function(a,na.rm = FALSE){
#returns the 90th percentile of the input vector
a <- remove_missing(a)
return (quantile(a,0.9)[[1]])
}
get_percentile90(a,na.rm = TRUE)
get_percentile90(b)
get_median(b)
get_percentile90 <- function(a,na.rm = FALSE){
#returns the 90th percentile of the input vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
return (quantile(remove_missing(a),0.9)[[1]])
}
get_percentile90(a,na.rm = TRUE)
get_percentile90(b)
get_percentile90(c)
get_median <- function(a, na.rm = FALSE){
#returns the median of a numeric vector
a <- remove_missing(a)
if(length((a)) %% 2 != 0) {
return (a[(length(a)+1)/2])
} else{
return ((a[length(a)/2] + a[(length(a)/2+1)])/2)
}
}
get_median(a,na.rm = TRUE)
get_median(b)
get_median(c)
get_average <- function(a, na.rm = FALSE){
#returns the average of a numeric vector
a <- remove_missing(a)
total <- 0
for (i in a){total <- total + i}
return (total/length(a))
}
get_average(a,na.rm = TRUE)
get_average(b)
get_average <- function(a, na.rm = FALSE){
#returns the average of a numeric vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{a <- remove_missing(a)
total <- 0
for (i in a){total <- total + i}
return (total/length(a))}
}
get_average(a,na.rm = TRUE)
get_average(b)
get_average(c)
get_stdev <- function(a,na.rm = FALSE){
#returns the standard deviation of a numeric vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{a <- remove_missing(a)
total <- 0
avg <- get_average(a)
for (i in a){total <- total + (i-avg)^2}
return (sqrt(total/(length(a)-1)))}
}
get_stdev(a,na.rm = TRUE)
get_stdev(b)
get_stdev(c)
get_quartile1 <- function(a,na.rm = FALSE){
#returns the first quartile of the input vector
a <- remove_missing(a)
return (quantile(a)[[2]])
}
get_quartile1(a,na.rm = TRUE)
get_quartile1(b)
get_quartile1 <- function(a,na.rm = FALSE){
#returns the first quartile of the input vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{a <- remove_missing(a)
return (quantile(a)[[2]])}
}
get_quartile1(a,na.rm = TRUE)
get_quartile1(b)
get_quartile1(c)
}
get_quartile3 <- function(a,na.rm = FALSE){
#returns the third quartile of the input vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{a <- remove_missing(a)
return (quantile(a)[[4]])}
}
get_quartile3(a, na.rm = TRUE)
get_quartile3(b)
sum(is.na(a))}
return (sum(is.na(a)))}
is.na(c(1,2,NA))
sum(is.na(c(1,2,NA)))
return (sum(is.na(a)))}
sum(is.na(a))}
count_missing <- function(a) {
#calculates the number of missing values NA in a input vector
sum(is.na(a))
}
count_missing(a)
summary_stats <- function(a){
summary <- vector("list", 11)
names(summary) <- c("minimum","percent10","quartile1","median","mean","quartile3",
"percent90","maximum","range","stdev","missing")
summary[[1]] = get_minimum(a)
summary[[2]] = get_percentile10(a)
summary[[4]] = get_median(a)
return (summary)
}
summary_stats(a)
summary_stats <- function(a){
summary <- vector("list", 11)
names(summary) <- c("minimum","percent10","quartile1","median","mean","quartile3",
"percent90","maximum","range","stdev","missing")
summary <- c(get_minimum(a),get_percentile10(a))
#summary[[1]] = get_minimum(a)
#summary[[2]] = get_percentile10(a)
#summary[[4]] = get_median(a)
return (summary)
}
summary_stats(a)
return (summary)}
summary_stats(a)
summary_stats <- function(a){
summary <- vector("list", 11)
names(summary) <- c("minimum","percent10","quartile1","median","mean","quartile3",
"percent90","maximum","range","stdev","missing")
summary[[1]] = get_minimum(a)
summary[[2]] = get_percentile10(a)
summary[[3]] = get_quartile1(a)
summary[[4]] = get_median(a)
summary[[5]] = get_mean(a)
summary[[6]] = get_quartile3(a)
summary[[7]] = get_quartile90(a)
summary[[8]] = get_maximum(a)
summary[[9]] = get_range(a)
summary[[10]] = get_stdev(a)
summary[[11]] = count_missing(a)
return (summary)
}
summary_stats(a)
summary_stats <- function(a){
summary <- vector("list", 11)
names(summary) <- c("minimum","percent10","quartile1","median","mean","quartile3",
"percent90","maximum","range","stdev","missing")
summary[[1]] = get_minimum(a)
summary[[2]] = get_percentile10(a)
summary[[3]] = get_quartile1(a)
summary[[4]] = get_median(a)
summary[[5]] = get_average(a)
summary[[6]] = get_quartile3(a)
summary[[7]] = get_quartile90(a)
summary[[8]] = get_maximum(a)
summary[[9]] = get_range(a)
summary[[10]] = get_stdev(a)
summary[[11]] = count_missing(a)
return (summary)
}
summary_stats(a)
summary_stats <- function(a){
summary <- vector("list", 11)
names(summary) <- c("minimum","percent10","quartile1","median","mean","quartile3",
"percent90","maximum","range","stdev","missing")
summary[[1]] = get_minimum(a)
summary[[2]] = get_percentile10(a)
summary[[3]] = get_quartile1(a)
summary[[4]] = get_median(a)
summary[[5]] = get_average(a)
summary[[6]] = get_quartile3(a)
summary[[7]] = get_percentile90(a)
summary[[8]] = get_maximum(a)
summary[[9]] = get_range(a)
summary[[10]] = get_stdev(a)
summary[[11]] = count_missing(a)
return (summary)
}
summary_stats(a)
summary_stats(b)
print_stats <- function(a) {
str(summary_stats(a))
}
print_stats(a)
print_stats(a)
library(shiny); runApp('Desktop/stat133/LAB/lab9/app4.R')
library(readr)
setwd("~/Desktop")
rawdata <- read.csv("data.csv")
getwd()
#create a vector containing the data we are going to use
library(readxl)
Players <- read_excel("players.xlsx")
install.packages("readxl")
#create a vector containing the data we are going to use
library(readxl)
Players <- read_excel("players.xlsx")
#importing packages and setting the working directory
library(ggplot2)
library(dplyr)
setwd("~/stat133/stat133-hws-fall17/post02")
#importing packages and setting the working directory
library(ggplot2)
library(dplyr)
setwd("~/stat133/stat133-hws-fall17/post02")
getwd()
#importing packages and setting the working directory
library(ggplot2)
library(dplyr)
setwd("stat133/stat133-hws-fall17/post02")
setwd("~/Desktop/stat133/stat133-hws-fall17/post2")
#importing packages and setting the working directory
library(ggplot2)
library(dplyr)
#importing nba2017-player-statistics
mpg_dat <- read.csv("nba2017-player-statistics.csv", colClasses = c("Player" = "character",
"Team" = "character",
"Experience" = "character",
"Position" = "factor",
"Salary" = "double"))
#mutating the minutes played per game (mpg)
mpg_dat <- mutate(mpg_dat, mpg = mpg_dat$MIN / mpg_dat$GP )
mpg_dat$mpg <- round(mpg_dat$mpg, 2)
#filtering out the players
player_list <- mpg_dat %>%
filter(Position == "PG" & mpg > 25) %>%
select(Player)
player_list
#how many players match the criteria?
nrow(player_list)
knitr::opts_chunk$set(echo = TRUE)
#importing packages and setting the working directory
library(ggplot2)
library(dplyr)
#importing nba2017-player-statistics
mpg_dat <- read.csv("nba2017-player-statistics.csv", colClasses = c("Player" = "character",
"Team" = "character",
"Experience" = "character",
"Position" = "factor",
"Salary" = "double"))
#mutating the minutes played per game (mpg)
mpg_dat <- mutate(mpg_dat, mpg = mpg_dat$MIN / mpg_dat$GP )
mpg_dat$mpg <- round(mpg_dat$mpg, 2)
#filtering out the players
player_list <- mpg_dat %>%
filter(Position == "PG" & mpg > 25) %>%
select(Player)
player_list
#how many players match the criteria?
nrow(player_list)
#importing nba2017-player-statistics
mpg_dat <- read.csv("nba2017-player-statistics.csv", colClasses = c("Player" = "character",
"Team" = "character",
"Experience" = "character",
"Position" = "factor",
"Salary" = "double"))
#mutating the minutes played per game (mpg)
mpg_dat <- mutate(mpg_dat, mpg = mpg_dat$MIN / mpg_dat$GP )
mpg_dat$mpg <- round(mpg_dat$mpg, 2)
#filtering out the players
player_list <- mpg_dat %>%
filter(Position == "PG" & mpg > 25) %>%
select(Player)
player_list
#how many players match the criteria?
nrow(player_list)
mpg_dat <- read.csv("nba2017-player-statistics.csv", colClasses = c("Player" = "character",
"Team" = "character",
"Experience" = "character",
"Position" = "factor",
"Salary" = "double"))
#importing nba2017-player-statistics
mpg_dat <- read.csv("nba2017-player-statistics.csv", colClasses = c("Player" = "character",
"Team" = "character",
"Experience" = "character",
"Position" = "factor",
"Salary" = "double"))
#mutating the minutes played per game (mpg)
mpg_dat <- mutate(mpg_dat, mpg = mpg_dat$MIN / mpg_dat$GP )
mpg_dat$mpg <- round(mpg_dat$mpg, 2)
#filtering out the players
player_list <- mpg_dat %>%
filter(Position == "PG" & mpg > 25) %>%
select(Player)
player_list
#how many players match the criteria?
nrow(player_list)
#importing csv file, only classifying columns that we will be using and need reclassification
isaiah <- read.csv("nba_savant202391.csv", colClasses =
c("name" = "character",
"action_type" = "character",
"shot_type" = "character",
"shot_made_flag" = "character"
))
str(isaiah)
#first, converting the shot_made_flag values from 0 and 1 to made and missed
isaiah$shot_made_flag[isaiah$shot_made_flag == 1] <- "shot_made"
isaiah$shot_made_flag[isaiah$shot_made_flag == 0] <- "shot_missed"
#creating a plot using dataframe
ggplot(isaiah, aes(x = x, y = y)) + geom_point(aes(colour = shot_made_flag)) + ggtitle("Isaiah Thomas's shot chart")
#loading packages
library(grid)
library(jpeg)
library(RCurl)
#downloading the halfcourt image
halfcourt.URL <- "https://thedatagame.files.wordpress.com/2016/03/nba_court.jpg"
halfcourt <- rasterGrob(readJPEG(getURLContent(halfcourt.URL)),
width = unit(1, "npc"), height = unit(1, "npc"))
#now performing the ggplot
ggplot(isaiah, aes(x = x, y = y)) + annotation_custom(halfcourt, -250,250,-50,420) +
geom_point(aes(colour = shot_type , shape = shot_made_flag)) +
xlim(-250, 250) +
ylim(-50, 400)
#let's also save this plot into the image folder
png(file = "../images/isaiah_shotchart.png")
ggplot(isaiah, aes(x = x, y = y)) + annotation_custom(halfcourt, -250,250,-50,420) +
geom_point(aes(colour = shot_type , shape = shot_made_flag)) +
xlim(-250, 250) +
ylim(-50, 400) +
ggtitle("Isaiah Thomas - Shot Chart")
dev.off()
#importing packages and setting the working directory
library(ggplot2)
library(dplyr)
#importing nba2017-player-statistics
mpg_dat <- read.csv("nba2017-player-statistics.csv", colClasses = c("Player" = "character",
"Team" = "character",
"Experience" = "character",
"Position" = "factor",
"Salary" = "double"))
#mutating the minutes played per game (mpg)
mpg_dat <- mutate(mpg_dat, mpg = mpg_dat$MIN / mpg_dat$GP )
mpg_dat$mpg <- round(mpg_dat$mpg, 2)
#filtering out the players
player_list <- mpg_dat %>%
filter(Position == "PG" & mpg > 25) %>%
select(Player)
player_list
#how many players match the criteria?
nrow(player_list)
#importing packages and setting the working directory
library(ggplot2)
library(dplyr)
#importing nba2017-player-statistics
mpg_dat <- read.csv("nba2017-player-statistics.csv", colClasses = c("Player" = "character",
"Team" = "character",
"Experience" = "character",
"Position" = "factor",
"Salary" = "double"))
#mutating the minutes played per game (mpg)
mpg_dat <- mutate(mpg_dat, mpg = mpg_dat$MIN / mpg_dat$GP )
mpg_dat$mpg <- round(mpg_dat$mpg, 2)
#filtering out the players
player_list <- mpg_dat %>%
filter(Position == "PG" & mpg > 25) %>%
select(Player)
player_list
#how many players match the criteria?
nrow(player_list)
install.packages("RCurl")
#importing csv file, and classifying columns
jeremy <- read.csv("nba_savant202391.csv", colClasses =
c("name" = "character",
"action_type" = "character",
"shot_type" = "character",
"shot_made_flag" = "character"
))
str(jeremy)
#first, converting the shot_made_flag values from 0 and 1 to made and missed
jeremy$shot_made_flag[jeremy$shot_made_flag == 1] <- "shot_made"
jeremy$shot_made_flag[jeremy$shot_made_flag == 0] <- "shot_missed"
#creating a plot using dataframe
ggplot(jeremy, aes(x = x, y = y)) + geom_point(aes(colour = shot_made_flag)) + ggtitle("jeremy Lin's shot chart")
#loading packages
library(grid)
library(jpeg)
library(RCurl)
#downloading the halfcourt image
halfcourt.URL <- "https://thedatagame.files.wordpress.com/2016/03/nba_court.jpg"
halfcourt <- rasterGrob(readJPEG(getURLContent(halfcourt.URL)),
width = unit(1, "npc"), height = unit(1, "npc"))
#now performing the ggplot
ggplot(jeremy, aes(x = x, y = y)) + annotation_custom(halfcourt, -250,250,-50,420) +
geom_point(aes(colour = shot_type , shape = shot_made_flag)) +
xlim(-250, 250) +
ylim(-50, 400)
#let's also save this plot
png(file = "jeremy_shotchart.png")
ggplot(jeremy, aes(x = x, y = y)) + annotation_custom(halfcourt, -250,250,-50,420) +
geom_point(aes(colour = shot_type , shape = shot_made_flag)) +
xlim(-250, 250) +
ylim(-50, 400) +
ggtitle("jeremy Lin - Shot Chart")
dev.off()
#replotting using ggplot
ggplot(jeremy, aes(x = x, y = y)) + annotation_custom(halfcourt, -250,250,-50,420) +
geom_point(aes(colour = shot_type , shape = shot_made_flag)) +
xlim(-250, 250) +
ylim(-50, 400) +
geom_rug(alpha = 0.25) +
coord_fixed() +
ggtitle("jeremy Lin - Shot Chart") +
theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
#let's save this one
png(file = "jeremy_shotchart2.png")
ggplot(jeremy, aes(x = x, y = y)) + annotation_custom(halfcourt, -250,250,-50,420) +
geom_point(aes(colour = shot_type , shape = shot_made_flag)) +
xlim(-250, 250) +
ylim(-50, 400) +
geom_rug(alpha = 0.25) +
coord_fixed() +
ggtitle("jeremy Lin - Shot Chart") +
theme(line = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
dev.off()
