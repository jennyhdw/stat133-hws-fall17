{remove_missing(a[1])}
return (sort(a[1]))
}
get_minimum <- function(a,na.rm = FALSE) {
#return the minimum value in a numeric vector
if(na.rm = TRUE)
{remove_missing(a[1])}
return (sort(a[1]))
}
get_minimum <- function(a,na.rm = FALSE) {
#return the minimum value in a numeric vector
if(na.rm = TRUE)
{remove_missing(a[1])}
return (sort(a[1]))
}
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
if(na.rm = TRUE)
{return(sort(remove_missing(a))[1])}
return (sort(a)[1])
}
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
if(na.rm = TRUE)
{return(sort(remove_missing(a))[1])}
return (sort(a)[1])
}
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
if(na.rm = TRUE)
{return(sort(remove_missing(a))[1])}
return (sort(a)[1])
}
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
if(na.rm = TRUE) {return(sort(remove_missing(a))[1])}
return (sort(a)[1])
}
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
if(na.rm == TRUE) {return(sort(remove_missing(a))[1])}
return (sort(a)[1])
}
a <- c(1,4,7,NA,10)
get_minimum(a,na.rm = TRUE)
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
if(na.rm == TRUE)
{return (sort(remove_missing(a))[1])}
return (sort(a,desending = TRUE)[1])
}
get_maximum(a,na.rm = TRUE)
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
if(na.rm == TRUE)
{return (sort(remove_missing(a),descending = TRUE)[1])}
return (sort(a,desending = TRUE)[1])
}
get_maximum(a,na.rm = TRUE)
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
if(na.rm == TRUE)
{return (sort(remove_missing(a),descending = TRUE)[1])}
return (sort(a,descending = TRUE)[1])
}
get_maximum(a,na.rm = TRUE)
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
if(na.rm == TRUE)
{return (sort(remove_missing(a),decreasing = TRUE)[1])}
return (sort(a,decreasing = TRUE)[1])
}
get_maximum(a,na.rm = TRUE)
get_range(a,na.rm = TRUE)
get_range <- function(a, na.rm = FALSE) {
#return the range of a numeric vector
if (na.rm == TRUE)
{return (get_maximum(remove_missing(a) - get_minimum(remove_missing(a)))}
return (get_maximum(a) - get_minimum(a))
}
get_range(a,na.rm = TRUE)
get_median <- function(a, na.rm = FALSE){
}
get_range(a,na.rm = TRUE)
get_range <- function(a, na.rm = FALSE) {
#return the range of a numeric vector
if (na.rm == TRUE)
{return (get_maximum(remove_missing(a) - get_minimum(remove_missing(a)))}
return (get_maximum(a) - get_minimum(a))
}
get_range(a,na.rm = TRUE)
get_range <- function(a, na.rm = FALSE) {
#return the range of a numeric vector
if (na.rm == TRUE)
{return (get_maximum(remove_missing(a) - get_minimum(remove_missing(a)))}
return (get_maximum(a) - get_minimum(a))
}
get_range(a,na.rm = TRUE)
get_median <- function(a, na.rm = FALSE){
}
get_range(a,na.rm = TRUE)
get_range <- function(a, na.rm = FALSE) {
#return the range of a numeric vector
if (na.rm == TRUE)
{return (get_maximum(remove_missing(a)) - get_minimum(remove_missing(a)))}
return (get_maximum(a) - get_minimum(a))
}
get_range(a,na.rm = TRUE)
length(c(1,2,3))
get_median <- function(a, na.rm = FALSE){
if(na.rm ==TRUE)
{remove_mising(a)}
if(length(a) %% 2 != 0) {
return (a[(length(a)+1)/2])
} else{
return ((a[length(a)/2] + a[(length(a)/2+1)])/2)
}
}
get_median(a,na.rm = TURE)
get_median(a,na.rm = TRUE)
get_median <- function(a, na.rm = FALSE){
if(na.rm ==TRUE)
{remove_missing(a)}
if(length(a) %% 2 != 0) {
return (a[(length(a)+1)/2])
} else{
return ((a[length(a)/2] + a[(length(a)/2+1)])/2)
}
}
get_median(a,na.rm = TRUE)
get_median <- function(a, na.rm = FALSE){
if(na.rm ==TRUE)
{a <- remove_missing(a)}
if(length((a)) %% 2 != 0) {
return (a[(length(a)+1)/2])
} else{
return ((a[length(a)/2] + a[(length(a)/2+1)])/2)
}
}
get_median(a,na.rm = TRUE)
get_average <- function(a, na.rm = FALSE){
total <- 0
if(na.rm ==TRUE)
{a <- remove_missing(a)}
for (i in a){
total <- total + i
}
return (total/length(a))
}
get_average(a)
a
remove_missing(a)
for (i in remove_missing(a))
{total <- total +i}
total <- 0
for (i in remove_missing(a)) {total <- total + i}
total
total / 4
get_average <- function(a, na.rm = FALSE){
total <- 0
if(na.rm == TRUE)
{a <- remove_missing(a)}
for (i in a){total <- total + i}
return (total/length(a))
}
get_average(a)
get_range(b)
b <- c(2,4,6,8,10)
get_range(b)
get_median(b)
b <- c(2,4,6,8,10,12)
get_median(b)
get_average(b)
get_average <- function(a, na.rm = FALSE){
total <- 0
if(na.rm == TRUE)
{a <- remove_missing(a)}
for (i in remove_missing(a)){total <- total + i}
return (total/length(a))
}
get_average(a)
get_average <- function(a, na.rm = FALSE){
total <- 0
if(na.rm == TRUE)
{a <- remove_missing(a)}
for (i in remove_missing(a)){total <- total + i}
return (total/length(remove_missing(a))
}
get_average(a)
get_average(b)
get_average(a)
get_average <- function(a, na.rm = FALSE){
total <- 0
if(na.rm == TRUE)
{a <- remove_missing(a)}
for (i in remove_missing(a)){total <- total + i}
return (total/length(remove_missing(a))
}
get_average(a)
get_average(b)
get_average <- function(a, na.rm = FALSE){
total <- 0
if(na.rm == TRUE)
{a <- remove_missing(a)}
for (i in remove_missing(a)){total <- total + i}
return (total/length(remove_missing(a)))
}
get_average(a)
get_median(a,na.rm = TRUE)
get_average <- function(a, na.rm = FALSE){
#returns the average of a numeric vector
total <- 0
if(na.rm == TRUE)
{a <- remove_missing(a)}
for (i in a){total <- total + i}
return (total/length(a))
}
get_average(a)
get_average <- function(a, na.rm = FALSE){
#returns the average of a numeric vector
if(na.rm == TRUE)
{a <- remove_missing(a)}
total <- 0
for (i in a){total <- total + i}
return (total/length(a))
}
get_average(a)
get_average(b)
get_average <- function(a, na.rm = FALSE){
#returns the average of a numeric vector
if(na.rm == TRUE)
{a <- remove_missing(a)}
total <- 0
for (i in remove_missing(a)){total <- total + i}
return (total/length(remove_missing(a))
}
get_average(a)
get_average(b)
get_average <- function(a, na.rm = FALSE){
#returns the average of a numeric vector
if(na.rm == TRUE)
{a <- remove_missing(a)}
total <- 0
for (i in remove_missing(a)){total <- total + i}
return (total/length(remove_missing(a)))
}
get_average(a)
get_average <- function(a, na.rm = FALSE){
#returns the average of a numeric vector
if(na.rm == TRUE)
{a <- remove_missing(a)}
total <- 0
for (i in a){total <- total + i}
return (total/length(a))
}
get_average(a,na.rm = TRUE)
get_stdev <- function(a,na.rm = FALSE){
if(na.rm == TRUE)
{a <- remove_missing(a)}
average <- get_average(a)
return (sqrt(average/(length(a)-1)))
}
get_stdev(a,na.rm = TRUE)
3^2
get_stdev <- function(a,na.rm = FALSE){
if(na.rm == TRUE)
{a <- remove_missing(a)}
average <- get_average(a)
return (sqrt(average^2/(length(a)-1)))
}
get_stdev(a,na.rm = TRUE)
get_stdev <- function(a,na.rm = FALSE){
if(na.rm == TRUE)
{a <- remove_missing(a)}
total <- 0
avg <- get_average(a)
for (i in a){
total <- total + (i-avg)^2
}
return (sqrt(total/(length(a)-1))
}
get_stdev(a,na.rm = TRUE)
get_stdev <- function(a,na.rm = FALSE){
if(na.rm == TRUE)
{a <- remove_missing(a)}
total <- 0
avg <- get_average(a)
for (i in a){
total <- total + (i-avg)^2
}
return (sqrt(total/(length(a)-1)))
}
get_stdev(a,na.rm = TRUE)
quantile(c(1,4,7,10))
quantile(c(1,4,7,10))[1]
quantile(c(1,4,7,10))[2]
quantile(c(1,4,7,10))[[2]
quantile(c(1,4,7,10))[[2]]
quantile(c(1,4,7,10))[[2]]
get_quartile1 <- function(a,na.rm = FALSE){
#returns the first quartile of the input vector
if(na.rm == TRUE)
{a <- remove_missing(a)}
return (quantile(a)[[2]])
}
get_quartile(a,na.rm = TRUE)
get_quartile1(a,na.rm = TRUE)
get_quartile3(a, na.rm = TRUE)
get_quartile3 <- function(a,na.rm = FALSE){
#returns the third quartile of the input vector
if(na.rm == TRUE)
{a <- remove_missing(a)}
return (quantile(a)[[4]])
}
get_quartile3(a, na.rm = TRUE)
count_missing(a)
count_missing <- function(a){
#calculates the number of missing values NA in a input vector
num <- 0
for (i in a){
if (is.na(i) == True)
{num <- num +1}
return (num)
}
}
count_missing(a)
if (is.na(i) == TRUE)
count_missing(a)
count_missing <- function(a){
#calculates the number of missing values NA in a input vector
num <- 0
for (i in a){
if (is.na(i) == TRUE)
{num <- num +1}
return (num)
}
}
count_missing(a)
a
count_missing <- function(a){
#calculates the number of missing values NA in a input vector
num <- 0
for (i in a){
if (is.na(i) == TRUE)
{num <- num +1} else {num <- num}
return (num)
}
}
count_missing(a)
remove_missing <- function(a) {
#returns the input vector without missing values
return (a[!is.na(a)])
}
for (i in a){}
for (i in a){if (is.na(i) == TRUE) {return ("y")}}
ia <- function(a){
for (i in a){
if (is.na(i) == TRUE){return ('y')}
}
}
ia(a)
ia <- function(a){
num <- 0
for (i in a){
if (is.na(i) == TRUE){num <- num + 1}
}
}
ia <- function(a){
num <- 0
for (i in a){
if (is.na(i) == TRUE){num <- num + 1}
return (num)
}
}
ia(a)
ia <- function(a){
num <- 0
for (i in a){
if (is.na(i) == TRUE){num <- num + 1}else{num <- num}
return (num)
}
}
ia(a)
is.na(1)
is.na(NA)
is.na(a)
ia <- function(a){
num <- 0
i <- 1
while (i <= length(a)){
if (is.na(a[i]) == TURE) {
num <- num + 1
i <- i + 1}
i <- i + 1}
return (num)
}
ia(a)
ia <- function(a){
num <- 0
i <- 1
while (i <= length(a)){
if (is.na(a[i]) == TRUE) {
num <- num + 1
i <- i + 1}
i <- i + 1}
return (num)
}
ia(a)
count_missing(b)
# Chunk 1: usarrests
head(USArrests)
states <- rownames(USArrests)
head(states)
# Chunk 2: nchar
# number of characters
nchar(states)
# Chunk 3: tolower
# to lower case
tolower(states)
# Chunk 4: toupper
# to upper case
toupper(states)
# Chunk 5: casefold
# case folding (upper = TRUE)
casefold(states, upper = TRUE)
# Chunk 6
# case folding (upper = FALSE)
casefold(states, upper = FALSE)
# Chunk 7: num-chars
# number of charcaters
num_chars <- nchar(states)
# Chunk 8: freq-table
# frequency table
char_freqs <- table(num_chars)
# barchart of number-of-characters
barplot(char_freqs)
# Chunk 9: pumpkin
paste('Pumpkin', 'Pie')
# Chunk 10: abcde
paste('a', 'b', 'c', 'd', 'e')
# Chunk 11: abcde-sep
paste('a', 'b', 'c', 'd', 'e', sep = '-')
# Chunk 12: vectorized
paste('a', 1:5, sep = '.')
# Chunk 13: paste0
# paste0() -vs- paste(..., sep = "")
paste0('Pumpkin', 'Pie')
paste('Pumpkin', 'Pie', sep = '')
# paste0() is also vectorized
paste0('a', 1:5)
# Chunk 14: frist5-states
# paste names with their num-of-chars
paste(states, "=", num_chars, sep = " ")
# Chunk 15: collapse
# collapse first 5 states
paste(states[1:5],collapse = "")
# Chunk 16: substr-berkeley
# extract first 3 characters
substr('Berkeley', 1, 3)
# Chunk 17: substr-ex1
# shorten state names with first 3 characters
substr(states, 1, 3)
# Chunk 18: substr-ex2
# shorten state names with last 3 characters
substr(states, num_chars-2, num_chars)
# Chunk 19
# shorten state names with first 3 characters
substr(states, 2, num_chars-2) <- ""
# Chunk 20
# 4-char states
states[num_chars == 4]
# Chunk 21
# 10-char states
states[num_chars == 10]
# Chunk 22
# collapse 4-char states
paste(states[num_chars == 4], collapse = ", ")
list_name <- as.numeric(names(char_freqs))
states_list <- vector("list",length(list_name))
for (i in 1:length(list_name)) {
collapsed <- paste(states[num_chars == list_name[i]], collapse =", ")
if (list_name[i] %% 2 == 0) {
states_list[[i]] <- toupper(collapsed)
} else {states_list[[i]] <- tolower(collapsed)}
}
names(states_list) = paste(list_name,"-chars")
states_list
summary_stats <- function(a){
summary <- vector(get_minimum(a),get_quartile1(a),get_median(a),get_average(a),
get_quartile3(a),get_maximum(a),get_range(a),get_stdev(a),count_missing(a))
return (summary)
}
summary_stats(a)
summary_stats <- function(a){
summary <- c(get_minimum(a),get_quartile1(a),get_median(a),get_average(a),
get_quartile3(a),get_maximum(a),get_range(a),get_stdev(a),count_missing(a))
return (summary)
}
summary_stats(a)
summary_stats(a, na.rm = TRUE)
summary_stats <- function(a, na.rm = FALSE){
summary <- c(get_minimum(a),get_quartile1(a),get_median(a),get_average(a),
get_quartile3(a),get_maximum(a),get_range(a),get_stdev(a),count_missing(a))
return (summary)
}
summary_stats(a, na.rm = TRUE)
summary_stats(a, na.rm = TRUE)
summary_stats <- function(a, na.rm = FALSE){
summary <- c(get_minimum(a),get_quartile1(a),get_median(a),get_average(a),
get_quartile3(a),get_maximum(a),get_range(a),get_stdev(a),count_missing(a))
return (summary)
}
