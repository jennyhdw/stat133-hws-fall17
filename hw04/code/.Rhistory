return (sort(a)[1])
}
get_minimum(a,na.rm = TRUE)
get_minimum(c(1,2,"a"))
remove_missing(c(1,2,"a"))
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
if(na.rm == TRUE) {(sort(remove_missing(a))[1])}
return (sort(a)[1])
}
get_minimum(c(1,2,"a"))
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
if(na.rm == TRUE) {sort(remove_missing(a))[1]}
(sort(a)[1])
}
get_minimum(a,na.rm = TRUE)
get_minimum(c(1,"a"))
sort(remove_missing(a))[1]}
{sort(remove_missing(a))[1]}}
{return (sort(remove_missing(a))[1])}}
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
if(na.rm == TRUE) {a <- remove_missing(a)}
{sort(remove_missing(a))[1]}
}
a <- c(1,4,7,NA,10)
get_minimum(a,na.rm = TRUE)
get_minimum(c(1,"a"))
b <- c(6,3,2,"a")
get_minimum(b)
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
if(na.rm == TRUE) {a <- remove_missing(a)}
{(sort(a,decreasing = TRUE)[1])}
}
get_maximum(a,na.rm = TRUE)
get_maximum(b)
get_minimum(c(1,2,3))
get_minimum(c(6,8,4))
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
#if(na.rm == TRUE) {a <- remove_missing(a)}
sort(remove_missing(a))[1]
}
get_minimum(a,na.rm = TRUE)
get_minimum(b)
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
if(na.rm == TRUE) {a <- remove_missing(a)}
{sort(remove_missing(a),decreasing = TRUE)[1])}
}
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
if(na.rm == TRUE) {a <- remove_missing(a)}
{sort(remove_missing(a),decreasing = TRUE)[1]}
}
get_maximum(b)
get_maximum(a,na.rm = TRUE)
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
sort(remove_missing(a))[1]
}
a <- c(1,4,7,NA,10)
b <- c(6,3,2,"a")
get_minimum(a,na.rm = TRUE)
get_minimum(b)
get_minimum(c(4,5,8,2))
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
{sort(remove_missing(a),decreasing = TRUE)[1]}
}
c <- c(7,4,5,12)
c <- c(7,4,5,12,NA)
get_maximum(c)
get_range <- function(a, na.rm = FALSE) {
#returns the range of a numeric vector
get_maximum(remove_missing(a)) - get_minimum(remove_missing(a))
}
get_range(a,na.rm = TRUE)
get_range(b)
get_range <- function(a, na.rm = FALSE) {
#returns the range of a numeric vector
remove_missing(a)
get_maximum(remove_missing(a)) - get_minimum(remove_missing(a))
}
get_range(b)
get_range <- function(a, na.rm = FALSE) {
#returns the range of a numeric vector
if(class(a) == 'numeric') {return ('non-numeric argument')}
{get_maximum(remove_missing(a)) - get_minimum(remove_missing(a))}
}
get_range(a,na.rm = TRUE)
get_range <- function(a, na.rm = FALSE) {
#returns the range of a numeric vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{get_maximum(remove_missing(a)) - get_minimum(remove_missing(a))}
}
get_range(a,na.rm = TRUE)
get_range(b)
get_range(c)
get_percentile10 <- function(a,na.rm = FALSE){
#returns the 10th percentile of the input vector
return (quantile(remove_missing(a),0.1)[[1]])
}
get_percentile10(a,na.rm = TRUE)
get_percentile10(b)
get_percentile10 <- function(a,na.rm = FALSE){
#returns the 10th percentile of the input vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{return (quantile(remove_missing(a),0.1)[[1]])}
}
get_percentile10(b)
get_percentile10(c)
get_percentile90 <- function(a,na.rm = FALSE){
#returns the 90th percentile of the input vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
return (quantile(remove_missing(a),0.9)[[1]])
}
get_percentile90(a,na.rm = TRUE)
get_percentile90(b)
get_percentile90(c)
get_median <- function(a, na.rm = FALSE){
#returns the median of a numeric vector
a <- remove_missing(a)
if(length((a)) %% 2 != 0) {
return (a[(length(a)+1)/2])
} else{
return ((a[length(a)/2] + a[(length(a)/2+1)])/2)
}
}
get_median(a,na.rm = TRUE)
get_median(b)
get_percentile90 <- function(a,na.rm = FALSE){
#returns the 90th percentile of the input vector
a <- remove_missing(a)
return (quantile(remove_missing(a),0.9)[[1]])
}
get_percentile90(a,na.rm = TRUE)
get_percentile90(b)
get_percentile90 <- function(a,na.rm = FALSE){
#returns the 90th percentile of the input vector
a <- remove_missing(a)
return (quantile(a,0.9)[[1]])
}
get_percentile90(a,na.rm = TRUE)
get_percentile90(b)
get_median(b)
get_percentile90 <- function(a,na.rm = FALSE){
#returns the 90th percentile of the input vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
return (quantile(remove_missing(a),0.9)[[1]])
}
get_percentile90(a,na.rm = TRUE)
get_percentile90(b)
get_percentile90(c)
get_median <- function(a, na.rm = FALSE){
#returns the median of a numeric vector
a <- remove_missing(a)
if(length((a)) %% 2 != 0) {
return (a[(length(a)+1)/2])
} else{
return ((a[length(a)/2] + a[(length(a)/2+1)])/2)
}
}
get_median(a,na.rm = TRUE)
get_median(b)
get_median(c)
get_average <- function(a, na.rm = FALSE){
#returns the average of a numeric vector
a <- remove_missing(a)
total <- 0
for (i in a){total <- total + i}
return (total/length(a))
}
get_average(a,na.rm = TRUE)
get_average(b)
get_average <- function(a, na.rm = FALSE){
#returns the average of a numeric vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{a <- remove_missing(a)
total <- 0
for (i in a){total <- total + i}
return (total/length(a))}
}
get_average(a,na.rm = TRUE)
get_average(b)
get_average(c)
get_stdev <- function(a,na.rm = FALSE){
#returns the standard deviation of a numeric vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{a <- remove_missing(a)
total <- 0
avg <- get_average(a)
for (i in a){total <- total + (i-avg)^2}
return (sqrt(total/(length(a)-1)))}
}
get_stdev(a,na.rm = TRUE)
get_stdev(b)
get_stdev(c)
get_quartile1 <- function(a,na.rm = FALSE){
#returns the first quartile of the input vector
a <- remove_missing(a)
return (quantile(a)[[2]])
}
get_quartile1(a,na.rm = TRUE)
get_quartile1(b)
get_quartile1 <- function(a,na.rm = FALSE){
#returns the first quartile of the input vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{a <- remove_missing(a)
return (quantile(a)[[2]])}
}
get_quartile1(a,na.rm = TRUE)
get_quartile1(b)
get_quartile1(c)
}
get_quartile3 <- function(a,na.rm = FALSE){
#returns the third quartile of the input vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{a <- remove_missing(a)
return (quantile(a)[[4]])}
}
get_quartile3(a, na.rm = TRUE)
get_quartile3(b)
sum(is.na(a))}
return (sum(is.na(a)))}
is.na(c(1,2,NA))
sum(is.na(c(1,2,NA)))
return (sum(is.na(a)))}
sum(is.na(a))}
count_missing <- function(a) {
#calculates the number of missing values NA in a input vector
sum(is.na(a))
}
count_missing(a)
summary_stats <- function(a){
summary <- vector("list", 11)
names(summary) <- c("minimum","percent10","quartile1","median","mean","quartile3",
"percent90","maximum","range","stdev","missing")
summary[[1]] = get_minimum(a)
summary[[2]] = get_percentile10(a)
summary[[4]] = get_median(a)
return (summary)
}
summary_stats(a)
summary_stats <- function(a){
summary <- vector("list", 11)
names(summary) <- c("minimum","percent10","quartile1","median","mean","quartile3",
"percent90","maximum","range","stdev","missing")
summary <- c(get_minimum(a),get_percentile10(a))
#summary[[1]] = get_minimum(a)
#summary[[2]] = get_percentile10(a)
#summary[[4]] = get_median(a)
return (summary)
}
summary_stats(a)
return (summary)}
summary_stats(a)
summary_stats <- function(a){
summary <- vector("list", 11)
names(summary) <- c("minimum","percent10","quartile1","median","mean","quartile3",
"percent90","maximum","range","stdev","missing")
summary[[1]] = get_minimum(a)
summary[[2]] = get_percentile10(a)
summary[[3]] = get_quartile1(a)
summary[[4]] = get_median(a)
summary[[5]] = get_mean(a)
summary[[6]] = get_quartile3(a)
summary[[7]] = get_quartile90(a)
summary[[8]] = get_maximum(a)
summary[[9]] = get_range(a)
summary[[10]] = get_stdev(a)
summary[[11]] = count_missing(a)
return (summary)
}
summary_stats(a)
summary_stats <- function(a){
summary <- vector("list", 11)
names(summary) <- c("minimum","percent10","quartile1","median","mean","quartile3",
"percent90","maximum","range","stdev","missing")
summary[[1]] = get_minimum(a)
summary[[2]] = get_percentile10(a)
summary[[3]] = get_quartile1(a)
summary[[4]] = get_median(a)
summary[[5]] = get_average(a)
summary[[6]] = get_quartile3(a)
summary[[7]] = get_quartile90(a)
summary[[8]] = get_maximum(a)
summary[[9]] = get_range(a)
summary[[10]] = get_stdev(a)
summary[[11]] = count_missing(a)
return (summary)
}
summary_stats(a)
summary_stats <- function(a){
summary <- vector("list", 11)
names(summary) <- c("minimum","percent10","quartile1","median","mean","quartile3",
"percent90","maximum","range","stdev","missing")
summary[[1]] = get_minimum(a)
summary[[2]] = get_percentile10(a)
summary[[3]] = get_quartile1(a)
summary[[4]] = get_median(a)
summary[[5]] = get_average(a)
summary[[6]] = get_quartile3(a)
summary[[7]] = get_percentile90(a)
summary[[8]] = get_maximum(a)
summary[[9]] = get_range(a)
summary[[10]] = get_stdev(a)
summary[[11]] = count_missing(a)
return (summary)
}
summary_stats(a)
summary_stats(b)
print_stats <- function(a) {
str(summary_stats(a))
}
print_stats(a)
print_stats(a)
library(shiny); runApp('Desktop/stat133/LAB/lab9/app4.R')
setwd("~/Desktop/stat133/stat133-hws-fall17/hw04/code")
library(shiny)
library(ggplot2)
library(ggvis)
source('../code/functions.R')
cleanscores <- read.csv("../data/cleandata/cleanscores.csv")
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevisdraft2.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
gdist
gdist <- as.data.frame(table(dat$Grade))
gdist <- cbind(gdist,prop.table(table(dat$Grade)))
gdist <- gdist[,c(1,2,4)]
colnames(gdist) <- c('Grade', 'Freq', 'Prop')
gdist <- gdist[c(3,1,2,6,4,5,9,7,8,10,11),]
gdist$Prop <- round(gdist$Prop, 2)
dat <- read.csv('../data/cleandata/cleanscores.csv')
# convert some variables as factors, for barcharts
dat$Grade <- as.factor(dat$Grade)
#creating prop table
gdist <- as.data.frame(table(dat$Grade))
gdist <- cbind(gdist,prop.table(table(dat$Grade)))
gdist <- gdist[,c(1,2,4)]
colnames(gdist) <- c('Grade', 'Freq', 'Prop')
gdist <- gdist[c(3,1,2,6,4,5,9,7,8,10,11),]
gdist$Prop <- round(gdist$Prop, 2)
gdist
freq_table <- data.frame(table(cleanscores$Grade))
freq_table$Prop <- freq_table$Freq/334
names(freq_table)[1] <- paste("Grade")
freq_table <- freq_table[c(3,1,2,6,4,5,9,7,8,10,11),]
freq_table
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
ls()
table(cleanscores$Grade)
freq_table <- data.frame(table(cleanscores$Grade))
freq_table$Prop <- freq_table$Freq/334
freq_table
table(cleanscores$Grade)
data.frame(table(cleanscores$Grade))
freq_table <- data.frame(table(cleanscores$Grade))
freq_table$Prop <- freq_table$Freq/334
freq_table
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
# ===================================================================
# Title: gradevis.R
# Description:
#   This script creates interactive Shiny apps with 3 different tabs
# Author: Jenny Huang
# Date: 11-14-2017
# ===================================================================
library(shiny)
library(ggplot2)
library(ggvis)
source('../code/functions.R')
cleanscores <- read.csv("../data/cleandata/cleanscores.csv")
freq_table <- data.frame(table(cleanscores$Grade))
freq_table$Prop <- freq_table$Freq/334
names(freq_table)[1] <- paste("Grade")
freq_table <- freq_table[c(3,1,2,6,4,5,9,7,8,10,11),]
#gdist <- as.data.frame(table(cleanscores$Grade))
#gdist <- cbind(gdist,prop.table(table(cleanscores$Grade)))
#gdist <- gdist[,c(1,2,4)]
#colnames(gdist) <- c('Grade', 'Freq', 'Prop')
#gdist <- gdist[c(3,1,2,6,4,5,9,7,8,10,11),]
#gdist$Prop <- round(gdist$Prop, 2)
vec <- colnames(cleanscores)
vec <- vec[1:22]
ui <- fluidPage(
titlePanel("Grade Visualizer"),
sidebarLayout(
sidebarPanel(
conditionalPanel(condition = "input.tabselected==1",
h3("Grades Distribution"),
tableOutput('gradetable')
),
conditionalPanel(condition = "input.tabselected==2",
selectInput("HW", "X-axis variable", vec,
selected = "HW1"),
sliderInput("BinWidth", "Bin Width",
min = 1, max = 10, value = 10)),
conditionalPanel(condition = "input.tabselected==3",
selectInput("X", "X-axis variable", vec,
selected = "Test1"),
selectInput("Y", "Y-axis variable",  vec,
selected = "Overall"),
sliderInput("Opacity", "Opacity",
min = 0, max = 1, value = 0.5))
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel('Barchart',value = 1,
ggvisOutput("bar")),
tabPanel("Histogram",value = 2,
ggvisOutput("hist"),
textOutput("text1"),
verbatimTextOutput("Summary")),
tabPanel("Scatterplot",value = 3,
ggvisOutput("scatter"),
textOutput("text2"),
verbatimTextOutput("corr")),
id = "tabselected")
)
)
)
server <- function(input, output){
output$gradetable <- renderTable({
freq_table <- data.frame(table(cleanscores$Grade))
freq_table$Prop <- freq_table$Freq/334
#names(freq_table)[1] <- paste("Grade")
#freq_table <- freq_table[c(3,1,2,6,4,5,9,7,8,10,11),]
freq_table
})
output$bar <- reactive({
fac_grade <- factor(cleanscores$Grade)
fac_grade <- factor(fac_grade,levels(fac_grade)[c(3,1,2,6,4,5,9,7,8,10,11)])
fac_grade <- data.frame(table(fac_grade))
names(fac_grade)[1] <- paste("Grade")
layer_bars(ggvis(fac_grade, ~Grade,~Freq)) %>% bind_shiny("bar")
})
output$hist <- reactive({
hw <- prop("x", as.symbol(input$HW))
cleanscores %>%
ggvis(x = hw, fill := "#abafb5") %>%
layer_histograms(stroke := 'white',
width = input$BinWidth) %>% bind_shiny("hist")
})
output$text1 <- renderText({
"Summary Statistics"
})
output$Summary <- renderPrint({
hw <- which(names(cleanscores) == input$HW)
print_stats(cleanscores[,hw])
})
output$scatter <- reactive({
colmx <- which(names(cleanscores) == input$X)
colmy <- which(names(cleanscores) == input$Y)
cleanscores %>%
ggvis(x = ~cleanscores[,colmx], y = ~cleanscores[,colmy], opacity := input$Opacity) %>%
layer_points() %>%
add_axis("x", title = names(cleanscores)[colmx]) %>%
add_axis("y", title = names(cleanscores)[colmy]) %>% bind_shiny("scatter")
})
output$text2 <- renderText({
"Correlation:"
})
output$corr <- renderPrint({
colmx <- which(names(cleanscores) == input$X)
colmy <- which(names(cleanscores) == input$Y)
#cat(cor(cleanscores[,colmx],cleanscores[,colmy]))
cor(cleanscores[,colmx],cleanscores[,colmy])
})
}
shinyApp(ui = ui, server = server)
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
gdist
freq_table
cleanscores <- read.csv("../data/cleandata/cleanscores.csv")
freq_table <- data.frame(table(cleanscores$Grade))
freq_table$Prop <- freq_table$Freq/334
names(freq_table)[1] <- paste("Grade")
freq_table <- freq_table[c(3,1,2,6,4,5,9,7,8,10,11),]
freq_table$Prop <- round(freq_table$Prop,2)
freq_table
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevisdraft2.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevisdraft2.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevisdraft2.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevisdraft2.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevisdraft2.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevisdraft2.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevisdraft2.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevisdraft2.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevisdraft2.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevisdraft2.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
