if (class(a) == "numeric") {
sum(is.na(a))}
else {return ("non-numeric argument")}
}
count_missing(a)
count_missing <- function(a){
#calculates the number of missing values NA in a input vector
sum(is.na(a))}
count_missing(a)
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
if (class(a) == 'numeric') {
if(na.rm == TRUE) {return(sort(remove_missing(a))[1])}
return (sort(a)[1])}
else {return ('non-numeric argument')}
}
get_minimum(a,na.rm = TRUE)
remove_missing <- function(a) {
#returns the input vector without missing values
if (class(a) == 'numeric'){return (a[!is.na(a)])}
else {return ('non-numeric argument')}
}
return (sort(a)[1])}
{return (sort(a)[1])}}
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
if(na.rm == TRUE) {return(sort(remove_missing(a))[1])}
{return (sort(a)[1])}
}
a <- c(1,4,7,NA,10)
get_minimum(a,na.rm = TRUE)
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
if(na.rm == TRUE)
{return (sort(remove_missing(a),decreasing = TRUE)[1])}
return (sort(a,decreasing = TRUE)[1])
}
get_maximum(a,na.rm = TRUE)
get_maximum(c(1,2,"a",4))
get_minimum(c(1,2,"a",4))
get_minimum(c(1,2,"a",4))
remove_missing <- function(a) {
#returns the input vector without missing values
return (a[!is.na(a)])
}
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
if (class(a) == 'numeric') {
if(na.rm == TRUE) {return(sort(remove_missing(a))[1])}
return (sort(a)[1])}
else {return ('non-numeric argument')}
}
get_minimum(a,na.rm = TRUE)
get_minimum(c(1,2,"a",4))
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
if (class(a) == 'numeric') {
if(na.rm == TRUE)
{return (sort(remove_missing(a),decreasing = TRUE)[1])}
return (sort(a,decreasing = TRUE)[1])}
{return ('non-numeric argument')}
}
get_maximum(c(1,2,"a"))
remove_missing <- function(a) {
#returns the input vector without missing values
if (class(a) == 'numeric') {return (a[!is.na(a)])}
{return ('non-numeric argument')}
}
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
if(na.rm == TRUE) {return(sort(remove_missing(a))[1])}
return (sort(a)[1])
}
get_minimum(a,na.rm = TRUE)
get_minimum(c(1,2,"a"))
remove_missing(c(1,2,"a"))
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
if(na.rm == TRUE) {(sort(remove_missing(a))[1])}
return (sort(a)[1])
}
get_minimum(c(1,2,"a"))
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
if(na.rm == TRUE) {sort(remove_missing(a))[1]}
(sort(a)[1])
}
get_minimum(a,na.rm = TRUE)
get_minimum(c(1,"a"))
sort(remove_missing(a))[1]}
{sort(remove_missing(a))[1]}}
{return (sort(remove_missing(a))[1])}}
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
if(na.rm == TRUE) {a <- remove_missing(a)}
{sort(remove_missing(a))[1]}
}
a <- c(1,4,7,NA,10)
get_minimum(a,na.rm = TRUE)
get_minimum(c(1,"a"))
b <- c(6,3,2,"a")
get_minimum(b)
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
if(na.rm == TRUE) {a <- remove_missing(a)}
{(sort(a,decreasing = TRUE)[1])}
}
get_maximum(a,na.rm = TRUE)
get_maximum(b)
get_minimum(c(1,2,3))
get_minimum(c(6,8,4))
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
#if(na.rm == TRUE) {a <- remove_missing(a)}
sort(remove_missing(a))[1]
}
get_minimum(a,na.rm = TRUE)
get_minimum(b)
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
if(na.rm == TRUE) {a <- remove_missing(a)}
{sort(remove_missing(a),decreasing = TRUE)[1])}
}
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
if(na.rm == TRUE) {a <- remove_missing(a)}
{sort(remove_missing(a),decreasing = TRUE)[1]}
}
get_maximum(b)
get_maximum(a,na.rm = TRUE)
get_minimum <- function(a,na.rm = FALSE) {
#returns the minimum value in a numeric vector
sort(remove_missing(a))[1]
}
a <- c(1,4,7,NA,10)
b <- c(6,3,2,"a")
get_minimum(a,na.rm = TRUE)
get_minimum(b)
get_minimum(c(4,5,8,2))
get_maximum <- function(a,na.rm = FALSE) {
#returns the maximum value in a numeric vector
{sort(remove_missing(a),decreasing = TRUE)[1]}
}
c <- c(7,4,5,12)
c <- c(7,4,5,12,NA)
get_maximum(c)
get_range <- function(a, na.rm = FALSE) {
#returns the range of a numeric vector
get_maximum(remove_missing(a)) - get_minimum(remove_missing(a))
}
get_range(a,na.rm = TRUE)
get_range(b)
get_range <- function(a, na.rm = FALSE) {
#returns the range of a numeric vector
remove_missing(a)
get_maximum(remove_missing(a)) - get_minimum(remove_missing(a))
}
get_range(b)
get_range <- function(a, na.rm = FALSE) {
#returns the range of a numeric vector
if(class(a) == 'numeric') {return ('non-numeric argument')}
{get_maximum(remove_missing(a)) - get_minimum(remove_missing(a))}
}
get_range(a,na.rm = TRUE)
get_range <- function(a, na.rm = FALSE) {
#returns the range of a numeric vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{get_maximum(remove_missing(a)) - get_minimum(remove_missing(a))}
}
get_range(a,na.rm = TRUE)
get_range(b)
get_range(c)
get_percentile10 <- function(a,na.rm = FALSE){
#returns the 10th percentile of the input vector
return (quantile(remove_missing(a),0.1)[[1]])
}
get_percentile10(a,na.rm = TRUE)
get_percentile10(b)
get_percentile10 <- function(a,na.rm = FALSE){
#returns the 10th percentile of the input vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{return (quantile(remove_missing(a),0.1)[[1]])}
}
get_percentile10(b)
get_percentile10(c)
get_percentile90 <- function(a,na.rm = FALSE){
#returns the 90th percentile of the input vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
return (quantile(remove_missing(a),0.9)[[1]])
}
get_percentile90(a,na.rm = TRUE)
get_percentile90(b)
get_percentile90(c)
get_median <- function(a, na.rm = FALSE){
#returns the median of a numeric vector
a <- remove_missing(a)
if(length((a)) %% 2 != 0) {
return (a[(length(a)+1)/2])
} else{
return ((a[length(a)/2] + a[(length(a)/2+1)])/2)
}
}
get_median(a,na.rm = TRUE)
get_median(b)
get_percentile90 <- function(a,na.rm = FALSE){
#returns the 90th percentile of the input vector
a <- remove_missing(a)
return (quantile(remove_missing(a),0.9)[[1]])
}
get_percentile90(a,na.rm = TRUE)
get_percentile90(b)
get_percentile90 <- function(a,na.rm = FALSE){
#returns the 90th percentile of the input vector
a <- remove_missing(a)
return (quantile(a,0.9)[[1]])
}
get_percentile90(a,na.rm = TRUE)
get_percentile90(b)
get_median(b)
get_percentile90 <- function(a,na.rm = FALSE){
#returns the 90th percentile of the input vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
return (quantile(remove_missing(a),0.9)[[1]])
}
get_percentile90(a,na.rm = TRUE)
get_percentile90(b)
get_percentile90(c)
get_median <- function(a, na.rm = FALSE){
#returns the median of a numeric vector
a <- remove_missing(a)
if(length((a)) %% 2 != 0) {
return (a[(length(a)+1)/2])
} else{
return ((a[length(a)/2] + a[(length(a)/2+1)])/2)
}
}
get_median(a,na.rm = TRUE)
get_median(b)
get_median(c)
get_average <- function(a, na.rm = FALSE){
#returns the average of a numeric vector
a <- remove_missing(a)
total <- 0
for (i in a){total <- total + i}
return (total/length(a))
}
get_average(a,na.rm = TRUE)
get_average(b)
get_average <- function(a, na.rm = FALSE){
#returns the average of a numeric vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{a <- remove_missing(a)
total <- 0
for (i in a){total <- total + i}
return (total/length(a))}
}
get_average(a,na.rm = TRUE)
get_average(b)
get_average(c)
get_stdev <- function(a,na.rm = FALSE){
#returns the standard deviation of a numeric vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{a <- remove_missing(a)
total <- 0
avg <- get_average(a)
for (i in a){total <- total + (i-avg)^2}
return (sqrt(total/(length(a)-1)))}
}
get_stdev(a,na.rm = TRUE)
get_stdev(b)
get_stdev(c)
get_quartile1 <- function(a,na.rm = FALSE){
#returns the first quartile of the input vector
a <- remove_missing(a)
return (quantile(a)[[2]])
}
get_quartile1(a,na.rm = TRUE)
get_quartile1(b)
get_quartile1 <- function(a,na.rm = FALSE){
#returns the first quartile of the input vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{a <- remove_missing(a)
return (quantile(a)[[2]])}
}
get_quartile1(a,na.rm = TRUE)
get_quartile1(b)
get_quartile1(c)
}
get_quartile3 <- function(a,na.rm = FALSE){
#returns the third quartile of the input vector
if(class(a) != 'numeric') {return ('non-numeric argument')}
{a <- remove_missing(a)
return (quantile(a)[[4]])}
}
get_quartile3(a, na.rm = TRUE)
get_quartile3(b)
sum(is.na(a))}
return (sum(is.na(a)))}
is.na(c(1,2,NA))
sum(is.na(c(1,2,NA)))
return (sum(is.na(a)))}
sum(is.na(a))}
count_missing <- function(a) {
#calculates the number of missing values NA in a input vector
sum(is.na(a))
}
count_missing(a)
summary_stats <- function(a){
summary <- vector("list", 11)
names(summary) <- c("minimum","percent10","quartile1","median","mean","quartile3",
"percent90","maximum","range","stdev","missing")
summary[[1]] = get_minimum(a)
summary[[2]] = get_percentile10(a)
summary[[4]] = get_median(a)
return (summary)
}
summary_stats(a)
summary_stats <- function(a){
summary <- vector("list", 11)
names(summary) <- c("minimum","percent10","quartile1","median","mean","quartile3",
"percent90","maximum","range","stdev","missing")
summary <- c(get_minimum(a),get_percentile10(a))
#summary[[1]] = get_minimum(a)
#summary[[2]] = get_percentile10(a)
#summary[[4]] = get_median(a)
return (summary)
}
summary_stats(a)
return (summary)}
summary_stats(a)
summary_stats <- function(a){
summary <- vector("list", 11)
names(summary) <- c("minimum","percent10","quartile1","median","mean","quartile3",
"percent90","maximum","range","stdev","missing")
summary[[1]] = get_minimum(a)
summary[[2]] = get_percentile10(a)
summary[[3]] = get_quartile1(a)
summary[[4]] = get_median(a)
summary[[5]] = get_mean(a)
summary[[6]] = get_quartile3(a)
summary[[7]] = get_quartile90(a)
summary[[8]] = get_maximum(a)
summary[[9]] = get_range(a)
summary[[10]] = get_stdev(a)
summary[[11]] = count_missing(a)
return (summary)
}
summary_stats(a)
summary_stats <- function(a){
summary <- vector("list", 11)
names(summary) <- c("minimum","percent10","quartile1","median","mean","quartile3",
"percent90","maximum","range","stdev","missing")
summary[[1]] = get_minimum(a)
summary[[2]] = get_percentile10(a)
summary[[3]] = get_quartile1(a)
summary[[4]] = get_median(a)
summary[[5]] = get_average(a)
summary[[6]] = get_quartile3(a)
summary[[7]] = get_quartile90(a)
summary[[8]] = get_maximum(a)
summary[[9]] = get_range(a)
summary[[10]] = get_stdev(a)
summary[[11]] = count_missing(a)
return (summary)
}
summary_stats(a)
summary_stats <- function(a){
summary <- vector("list", 11)
names(summary) <- c("minimum","percent10","quartile1","median","mean","quartile3",
"percent90","maximum","range","stdev","missing")
summary[[1]] = get_minimum(a)
summary[[2]] = get_percentile10(a)
summary[[3]] = get_quartile1(a)
summary[[4]] = get_median(a)
summary[[5]] = get_average(a)
summary[[6]] = get_quartile3(a)
summary[[7]] = get_percentile90(a)
summary[[8]] = get_maximum(a)
summary[[9]] = get_range(a)
summary[[10]] = get_stdev(a)
summary[[11]] = count_missing(a)
return (summary)
}
summary_stats(a)
summary_stats(b)
print_stats <- function(a) {
str(summary_stats(a))
}
print_stats(a)
print_stats(a)
library(shiny); runApp('Desktop/stat133/LAB/lab9/app4.R')
library(shiny); runApp('Desktop/stat133/stat133-hws-fall17/hw04/app/barchart.R')
runApp('Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
colm <- which(names(cleanscores) == input$HW)
bw <- input$BinWidth
layer_histograms(ggvis(cleanscores[,colm]),width = bw)
library(shiny)
library(ggplot2)
library(ggvis)
cleanscores <- read.csv("../data/cleandata/cleanscores.csv",
colClasses = c(rep("real",22),"character"))
setwd("~/Desktop/stat133/stat133-hws-fall17/hw04/code")
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
colm <- which(names(cleanscores) == input$HW)
bw <- input$BinWidth
layer_histograms(ggvis(cleanscores[,colm]),width = bw)
cleanscores <- read.csv("../data/cleandata/cleanscores.csv",
colClasses = c(rep("real",22),"character"))
colm <- which(names(cleanscores) == input$HW)
bw <- input$BinWidth
layer_histograms(ggvis(cleanscores[,colm]),width = bw)
colm <- which(names(cleanscores) == input$HW)
colm <- which(names(cleanscores) == input$HW)
layer_histogramsd
layer_histograms(ggvis(cleanscores[,colm]),width = bw)
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
colm <- prop("x",as.symbol(input$HW)) #which(names(cleanscores) == input$HW)
layer_histograms(ggvis(cleanscores[,colm],width = bw))
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/barchart.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/barchart.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/barchart.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
names(cleanscores)
as.symbol(names(cleanscores[1]))
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
which(names(cleanscores) == "HW1")
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
layer_histograms(ggvis(cleanscores[,1]))
library(shiny)
library(ggplot2)
library(ggvis)
library(shiny)
library(ggplot2)
library(ggvis)
layer_histograms(ggvis(cleanscores[,1]))
print_stats(cleanscores[,colm])
print_stats(cleanscores[,1])
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
prop("x", as.symbol(input$HW))
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
cleanscores[,"HW1"]
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
print_stats(summary_stats(cleanscores[,1]))
print_stats(cleanscores[,1])
summary_stats(cleanscores[,1])
print_stats(cleanscores[,1])
printstats(cleanscores$HW1)
print_stats(cleanscores$HW1)
print_stats <- function(a) {
name <- names(summary_stats(a))
for (i in 1:length(name)){
difference <- 9 - nchar(name[i])
space <- paste(rep(" ",difference),collapse = "")
cat(paste0(name[i],space,": ",
format(round(summary_stats(a)[[i]],3),nsmall = 4),'\n'))}
}
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
print_stats(summary_stats(cleanscores[,1]))
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/Scatterplot.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
print_stats(summary_stats(cleanscores[,1]))
print_stats(cleanscores[,1])
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/histogram.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/Scatterplot.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/Scatterplot.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/Scatterplot.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/Scatterplot.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/Scatterplot.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/Scatterplot.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/Scatterplot.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/Scatterplot.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/Scatterplot.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/Scatterplot.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/Scatterplot.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/Scatterplot.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/Scatterplot.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/Scatterplot.R')
